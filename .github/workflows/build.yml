name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  winrt-build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Setup NuGet.exe for use with actions
      uses: NuGet/setup-nuget@v1
      with:
        nuget-version: latest  
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash
    - name: Patch version on git tag
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      run: |
        If ($env:GIT_TAG){
        (Get-Content .\project\Package.appxmanifest) | Foreach-Object {$_ -replace "1.0.0.0", "$env:GIT_TAG"} | Set-Content .\project\Package.appxmanifest
        Write-Host -ForegroundColor Yellow "Setting AppxManifest version to $env:GIT_TAG"
        }
        else
        {
        Write-Host -ForegroundColor Yellow "Not modifying version in AppxManifest"
        }
      shell: powershell
      env:
        GIT_TAG: ${{ steps.get_version.outputs.VERSION }}
    - name: NuGet restore
      run: |
        cd project
        nuget restore
        cd ..
    - name: overwrite vcxproj
      run: |
        echo overwrite vcxproj
        copy mixerfixfiles\* project\externals\SDL2_mixer\VisualC-WinRT\UWP_VS2015
    - name: Build project
      run: |
        cd project
        msbuild VVVVV.sln /p:OutputPath=output /p:Platform=x64 /p:Configuration=Debug /p:AppxBundlePlatforms="x64" /p:AppxPackageDir="$env:PACKAGE_DIR" /p:AppxBundle=Always /p:UapAppxPackageBuildMode="Sideload" /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="" /p:PackageCertificateKeyFile="$env:CERT_FILE" /p:PackageCertificatePassword="$env:CERT_KEY"
        cd ..
      shell: powershell
      env:
        PACKAGE_DIR: appx
        PACKAGE_BUILD_MODE: SideloadOnly
        CERT_FILE: VVVVV_TemporaryKey.pfx
        CERT_KEY: ${{ secrets.CERT_KEY }}
    - uses: actions/upload-artifact@v2
      with:
        name: VVVVVV-Release
        path: project/appx/*
    - name: generate artifact zip
      run: |
        Compress-Archive -Path project/appx/* -DestinationPath VVVVVV-Release-V${{ github.run_number }}.zip
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: V${{ github.run_number }}
        release_name: Release V${{ github.run_number }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./VVVVVV-Release-V${{ github.run_number }}.zip
        asset_name: VVVVVV-Release-V${{ github.run_number }}.zip
        asset_content_type: application/zip
    
          
          

